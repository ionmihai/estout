# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_utils.ipynb.

# %% auto 0
__all__ = ['rgetattr', 'rsetattr', 'default_formats', 'formats', 'get_stars', 'model_groups', 'tex_table_env']

# %% ../nbs/01_utils.ipynb 4
import functools
from typing import Dict, List, Tuple 
import pandas as pd 
import numpy as np

# %% ../nbs/01_utils.ipynb 5
def rgetattr(obj, attr, *args):
    """Recursive getattr (for nested attributes)."""
    def _getattr(obj, attr):
        return getattr(obj, attr, *args)
    return functools.reduce(_getattr, [obj] + attr.split('.'))

# %% ../nbs/01_utils.ipynb 6
def rsetattr(obj, attr, val):
    """Recursive setattr (for nested attributes)."""
    pre, _, post = attr.rpartition('.')
    return setattr(rgetattr(obj, pre) if pre else obj, post, val)

# %% ../nbs/01_utils.ipynb 7
def default_formats(
                    ) -> dict:
    """Default output formats for some very common statistics."""
    return  {'params':'{:.2f}', 
            'tstats':'{:.2f}', 
            'pvalues': '{:.3f}',
            'se':'{:.2f}', 
            'R2':'{:.3f}',
            'N':'{:.0f}'
            }

# %% ../nbs/01_utils.ipynb 9
def formats(digits: dict=None, # keys are parameter names, values are integers specifying float precision
            general: dict=None # keys are parameter names, values are valid python format specifications
            ) -> dict:
    """Add formats specified by *digits* or *general* to default_formats() (can overwrite defaults)."""
    
    out = default_formats()
    if digits is not None:
        for param_name, d in digits.items():
            out[param_name] = '{:.%if}' %d
    if general is not None:
        for param_name, d in general.items():
            out[param_name] = d    
    return out


# %% ../nbs/01_utils.ipynb 15
def get_stars(pvalue: float, # this is compared to key of 'stars' parameter to determine how many stars should be added
            stars: dict = {.1:'*',.05:'**',.01:'***'} # todo: default values to the left are star symbols that are not rendered correctly in markdown
            ) -> str:
    """Returns string with the appropriate number of stars given the 'pvalue'"""

    #Sort 'stars' by key (in reverse order)
    ks = list(stars.keys())
    ks.sort(reverse=True)
    stars = {k: stars[k] for k in ks}
    
    stars_string = ''
    for alpha in stars:
        if pvalue < alpha:
            stars_string = stars[alpha]
            
    return stars_string

# %% ../nbs/01_utils.ipynb 20
def model_groups(column_group_names: Dict[str, List[int]], # keys are group titles, values are lists of column indices included in each group
                add_clines: bool=True # if True, adds lines below group names
                ) -> str:
    """Returns LaTex code needed to add at the top of the table in order to give names to groups of columns in the table."""
    
    group_names = ''
    group_lines = ''
    for key,value in column_group_names.items():
        if type(key) != str:
            raise TypeError('Each key in column_group_names must be a string')
        if type(value) != list:
            raise TypeError("Each value in column_group_names dict must be a list")
        if len(value) != 2:
            raise TypeError("Each value in column_group_names dict must contain two integers")
        
        value = sorted(value)
        group_names += '& \multicolumn{%i}{c}{%s} ' %(value[1]-value[0]+1,key)
        if add_clines:
            group_lines += '\cline{%s-%s} ' %(str(value[0]+1),str(value[1]+1))

    return group_names + ' \\\\ \n' + group_lines + ' \n'

# %% ../nbs/01_utils.ipynb 22
def tex_table_env(nr_columns: int, # number of columns in the table
                    env: str='tabularx' # latex tabular environment specification. either 'tabularx' or 'tabular*'
                    ) -> Tuple[str,str]:
    """Creates LaTex code to add at the top of the table to create the correct tabular environment."""

    if env=='tabularx':
        header = '\\begin{tabularx}{\\textwidth}{@{}l *{%i}{>{\centering\\arraybackslash}X}@{}}' %nr_columns 
        footer = '\\end{tabularx}'
    elif env=='tabular*':
        header = '\\begin{tabular*}{\\textwidth}{@{\extracolsep{\\fill}}l*{%i}{c}}' %nr_columns
        footer = '\\end{tabular*}'
    else:
        raise NotImplemented(f"LaTex tabular environment {env} has not yet been implemented in tex_table_env()")
    return header,footer 
